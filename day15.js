const sample_data = `
1163751742
1381373672
2136511328
3694931569
7463417111
1319128137
1359912421
3125421639
1293138521
2311944581
`;

const sample_data_part2 = `
11637517422274862853338597396444961841755517295286
13813736722492484783351359589446246169155735727126
21365113283247622439435873354154698446526571955763
36949315694715142671582625378269373648937148475914
74634171118574528222968563933317967414442817852555
13191281372421239248353234135946434524615754563572
13599124212461123532357223464346833457545794456865
31254216394236532741534764385264587549637569865174
12931385212314249632342535174345364628545647573965
23119445813422155692453326671356443778246755488935
22748628533385973964449618417555172952866628316397
24924847833513595894462461691557357271266846838237
32476224394358733541546984465265719557637682166874
47151426715826253782693736489371484759148259586125
85745282229685639333179674144428178525553928963666
24212392483532341359464345246157545635726865674683
24611235323572234643468334575457944568656815567976
42365327415347643852645875496375698651748671976285
23142496323425351743453646285456475739656758684176
34221556924533266713564437782467554889357866599146
33859739644496184175551729528666283163977739427418
35135958944624616915573572712668468382377957949348
43587335415469844652657195576376821668748793277985
58262537826937364893714847591482595861259361697236
96856393331796741444281785255539289636664139174777
35323413594643452461575456357268656746837976785794
35722346434683345754579445686568155679767926678187
53476438526458754963756986517486719762859782187396
34253517434536462854564757396567586841767869795287
45332667135644377824675548893578665991468977611257
44961841755517295286662831639777394274188841538529
46246169155735727126684683823779579493488168151459
54698446526571955763768216687487932779859814388196
69373648937148475914825958612593616972361472718347
17967414442817852555392896366641391747775241285888
46434524615754563572686567468379767857948187896815
46833457545794456865681556797679266781878137789298
64587549637569865174867197628597821873961893298417
45364628545647573965675868417678697952878971816398
56443778246755488935786659914689776112579188722368
55172952866628316397773942741888415385299952649631
57357271266846838237795794934881681514599279262561
65719557637682166874879327798598143881961925499217
71484759148259586125936169723614727183472583829458
28178525553928963666413917477752412858886352396999
57545635726865674683797678579481878968159298917926
57944568656815567976792667818781377892989248891319
75698651748671976285978218739618932984172914319528
56475739656758684176786979528789718163989182927419
67554889357866599146897761125791887223681299833479
`;


const puzzle_data = `
9134437236318171116117288148911191769789149391998581842118486728495315197918969961726641911197278519
4266599972129377121978987858118144193371121224689932255439189962124983957264992917811528481174141159
4941264622844649255181863611661937989592573911314587911782284256729939692285214646949151417873145114
9945129815342473711424195426247119937972981595714311991417119392838691411867714292812665718171417224
1423818398213251171691473971673889569992131512132754569226823131415196188491991866258247115715611321
8271949774191463914431151294928179929172131829943916791618917131342352982182671917472939235329739287
1952694952277173514253513153118634151159329774821227939596521118915991151517398355228881788289998825
6294228718411191711731415119272125331883929678134156945112362831191869711861933445241916118268865925
2356988459435979847977978218396878179236826858228579488119689162193671247912113492191423992627295229
2111941153771299263815996117179768913916931152689617128191487833381948938691616718823312163299281129
9171226987969165893999355671387991712129929312892448326219555178861569689471513141379921621364122952
1249283311974145392919182141161915111428797238114236163511979989617362555346148769687595349142819111
9571153637692556311122411512417957975197837271859411582315253218891991115633697938928761345192119815
6911911719178156912898261314116923182117799319918261334615762427162794888182289172165471919659749491
5138941619256899722425914897278227859922169794121914729992557374347523328615137941489945927279892298
1691252769119353319251199741258446168371199133897657115794287829411223252993425141227229172926195991
4431947845795998941397452166121292427378268698276815598921157812421421921137439117762855115396211321
1412756891815118959881159821318921697175898788398954349771755161362198519611669783133198193528874868
9112427971395352891325118446527417451387398974497274794171961657481915243671945196458978948184534614
1252984992119991919443992419281218931751632496151245223815394764927248125111917191639415221892886327
5275881461396171768287168681176851922162133331972139186149383246278369457147977367987123251988139239
3155313932191132412999399385239196913239141225397279469965159917967896812911581351817198298381714458
8464311739148758223215553168996711382181221218285896362741211188733419177711385113999818871569458994
1879111627898539912854218917149885217579453695415812149191615172737921454619365138151192211263832184
1745287434814238973615122917959292149719727428287841339213292793511992466717722299721728324384289841
4119917831499159771215319299198921969441688115393251912979392649954159382215672649185991245667814867
8421899779299898935824114111781991991411972699748599694715611772821147161929899653114683282545695526
1391911761757955826198918825188872958214852918859954962451299229771599464484643431812976399151594211
7999299191226143344136335797291214258929751616148411628765219875949185336487232964441426796267617912
9312793471126411211319197241162921824154811118258812197295391233753951149972246192116499143192987292
4166762724111379882254285999918693852512391771491411962495421789918493222895245283519755983913436856
2963981682868141266469319124727698516761839935812991845875451292524746826223193197624842311169613222
6612255182641994167791551111348896911973163521891312524155251722964145239519186611192969965242913815
3812621525315137988179772883496249224315754451295212281139491173735522521919727818254843554645119381
4999158935552656126424919271681281222845174349586213875171837259468168544653738583124471131293191635
3181461832897859121599429871282449726143213119969341268912719652828419145751649491758911217661915157
2169192795931271344799317331232245363729244373498978114194323826954196691112529121721939918266141929
3241171999893699197731615971189489698196184156739628453726665161716169418115729142121813117496917312
9831982399979619227751246564122511222191768891641244418169396221146399559241628139113624784889111194
1155992956973218257113121742449819911282169221791685438834989831462311298934183898126817972689556913
2519898848973471121965719156724668633673521392182113214714862941331418991139359111131317972245927248
1118272518293161815811581122177733818141312931879171267424799872998965711214314214963634164128586931
2942442175915698691189261219221898849591485832258619654613715291299912115494527828561788132242817329
9134374827352131491917164116112919112787815595986821853713344183899964113211196119611514227791311992
9924299274183222692855629928987629693696499919678172652254115527315712512151391963112118896723831394
6779188289768247515714634371778114944931198991117156179591211247196718242116149269395151911696952519
6119956112724139655491921933667514145862512222356296111499316331983418167229798845792853586693717131
6372419768588511842299529371721979699214258298121849549534431753318493219659119917449983451931926192
3485612552714411976149279439751975283275376828619691946988338211527217167319996112545312398992879576
8911294845849625718666114889391259242715919185919258191919825363677319992889695151251781589282852117
4759389598841389431656112779112613727996898244974817841817673141882655234312237196313473494929711296
2517916235761217123817811121342199762378281252761996844994858638621799822625147911311996961937298294
8941194944727437278225493439462865186717416935129471145392629214119511179552917231612758179238812192
8613679516939369115354319882498579981182142179392359372494313198765131854838591291111497225594621291
1321812891162243718977896933879119675992957879218399616327481131591451932792366297113625996961715161
9919212621338919781697293391954682913289543115843443361296269489413995767817811241472294564151339898
1153111296993149893651924112964964498943984891792279823296848763161369826128828344762117588116482442
6123889111891594678393829789136113819817277539926913591976269942117982588817411692511994951496113514
3657811212317993965191682913498637567188187111117115621469178459598143491991792689755739933419117862
7314238428299521431289133119379941741813916137974192112136216716487266119929717625919112311493945899
4582259569619129439519515298935136921338659571725612321769129259399162831816521211675898518155647185
9337781751569517624916199381968246468135841277376892295935423361417921323271527491114899619766811929
6496894511398568413638937939142622175812611591219465278582322635169316643921142893963885889927221829
9318299299359253261579998597435658137417149721348299137634991118913481795889317121113338934128838629
6541881992577123981195284395322888211297894224491391962893439581761934194671147952725731481427916649
9311452111494252879933898891614768841261859962518671447799131599799521639754123258387678228943995311
7914972421955981118348969134195843411368511735627132149839112127893994123473952691819167912799723124
1148123817312136912725525155116195975886323391941888991939816715748973117421318917639921146511652985
1199179183175916316771119743618165114495659192195944588463122311315675991911843866795727192997866988
9337612411577132215565136169797995961321193921231868914489125228236861957111791121699917726559832713
1527861616446251369121672139925121545192136447182614449376627391866462621154311989436118329916169849
5988658341336525277657964159221299997699171286183921358327151183141825891152978939848511311271593926
1569247222134936917536456153929155118563335252391138515531339399219733451936875816329472261397159162
2899483829435817271833114149863318984981183561112229826192183676616452514124142991716196214798497919
9527213833937136521987411723376681985293899165175386716871819947959194632794697178923684119463547829
2854432958777866715317916915113811894364131583222426327295252996237937885931182736177587595356652826
9292791825572342998189238243481265143547123371145272499877211861289528149911866723621152144889164521
7812791799144112298119927111729999331915996374849222511786242989692145121139867622884136581416861877
2621697312859698611314954659879711998947319146163283382749226353492995814551983529319197719146319279
1181689782312573125995572776913895925171719598759894581282921836139182186977823977139988831937622188
1699371374339217977493799224337731169591838158994283944355214634111659452591451955335692953966318314
6921766478831113391177431172211315219799523578679981229512729591461641328367485691611299226369221868
1621183335128299162112113216382599938981412719143441119714219494571485175571363933181533696417218993
8111733123792914948924741644289258361929671131265585911491923132589853772112698247452955252652287195
4623565625343971711118316872971671351998386941178128117481951295674894929491113119859179268811672891
9119253898553912835191299992174182446119522826949624892968911122889389959979722346686641928178371515
1156979519211885312865297819159992638192941638151344933497157381518531741418311312939933873322996162
9119866992911469199934229138529227124588462935646719771117722149719163467299528793678922791293192756
5754112531261399382691549594226235781794322919551722626284861999719919938122995814891929128348195227
1476939511988755913262415929131918147129878942582826367868775152919383681939285969253767294271769221
4139838427281391394644889717526983869112349958311477333993331271264398181716117119671177353876357113
9395111963828795242322999743437188928311517327921181521397714214124992279711196564219515654423132714
5397995631493629229761241328349116889325332194211384536692587121267898922532891128293457732564197447
1428788229794345214842932733556277189861813158716216541114488155884118964521257399853593319713317954
6728345291621899178333839493777613181691411694427424287889116411916641242419499935762325669754616915
8483418822832213859522891811919124297212128149427761926241859462911148672547925611168174834274766844
9392994191381132573111791221994711714912329797688737955321919386929933869914697342139924761519959232
8913639328747941618998853389276157672143941321324374964653258173881963233275332569899861163971254537
2176921618954489827742992883331891265257528128915417961339186196593313933247197215741495622248115191
1921172993934749931619794374326831718362869432327311322223119167392126596357641716995181921555441215
`;


function getHeap() {
  return new BinaryHeap(function(node) {
    return node.f;
  });
}


function BinaryHeap(scoreFunction) {
  this.content = [];
  this.scoreFunction = scoreFunction;
}

BinaryHeap.prototype = {
  push: function(element) {
    // Add the new element to the end of the array.
    this.content.push(element);

    // Allow it to sink down.
    this.sinkDown(this.content.length - 1);
  },
  pop: function() {
    // Store the first element so we can return it later.
    var result = this.content[0];
    // Get the element at the end of the array.
    var end = this.content.pop();
    // If there are any elements left, put the end element at the
    // start, and let it bubble up.
    if (this.content.length > 0) {
      this.content[0] = end;
      this.bubbleUp(0);
    }
    return result;
  },
  remove: function(node) {
    var i = this.content.indexOf(node);

    // When it is found, the process seen in 'pop' is repeated
    // to fill up the hole.
    var end = this.content.pop();

    if (i !== this.content.length - 1) {
      this.content[i] = end;

      if (this.scoreFunction(end) < this.scoreFunction(node)) {
        this.sinkDown(i);
      } else {
        this.bubbleUp(i);
      }
    }
  },
  size: function() {
    return this.content.length;
  },
  rescoreElement: function(node) {
    this.sinkDown(this.content.indexOf(node));
  },
  sinkDown: function(n) {
    // Fetch the element that has to be sunk.
    var element = this.content[n];

    // When at 0, an element can not sink any further.
    while (n > 0) {

      // Compute the parent element's index, and fetch it.
      var parentN = ((n + 1) >> 1) - 1;
      var parent = this.content[parentN];
      // Swap the elements if the parent is greater.
      if (this.scoreFunction(element) < this.scoreFunction(parent)) {
        this.content[parentN] = element;
        this.content[n] = parent;
        // Update 'n' to continue at the new position.
        n = parentN;
      }
      // Found a parent that is less, no need to sink any further.
      else {
        break;
      }
    }
  },
  bubbleUp: function(n) {
    // Look up the target element and its score.
    var length = this.content.length;
    var element = this.content[n];
    var elemScore = this.scoreFunction(element);

    while (true) {
      // Compute the indices of the child elements.
      var child2N = (n + 1) << 1;
      var child1N = child2N - 1;
      // This is used to store the new position of the element, if any.
      var swap = null;
      var child1Score;
      // If the first child exists (is inside the array)...
      if (child1N < length) {
        // Look it up and compute its score.
        var child1 = this.content[child1N];
        child1Score = this.scoreFunction(child1);

        // If the score is less than our element's, we need to swap.
        if (child1Score < elemScore) {
          swap = child1N;
        }
      }

      // Do the same checks for the other child.
      if (child2N < length) {
        var child2 = this.content[child2N];
        var child2Score = this.scoreFunction(child2);
        if (child2Score < (swap === null ? elemScore : child1Score)) {
          swap = child2N;
        }
      }

      // If the element needs to be moved, swap it, and continue.
      if (swap !== null) {
        this.content[n] = this.content[swap];
        this.content[swap] = element;
        n = swap;
      }
      // Otherwise, we are done.
      else {
        break;
      }
    }
  }
};


function parseData(indata) {
    return indata.trim().split("\n").reduce((p, v) => {
        p.push(v.split("").map(n => parseInt(n, 10)));
        return p;
    }, []);
}

function initBoard(grid) {
    for(var y = 0; y < grid.length; y++) {
     
        for(var x = 0; x < grid[y].length; x++) {

            var cost = grid[y][x];

            grid[y][x] = {
                cost: cost,
                totalCost: 0,
                f: cost,
                parent: null,
                g: 0,
                h: null,
                pos: {
                    y: y,
                    x: x
                }
            }; 
        }
    }
    return grid;
}

function removeNodeFromList(list, node) {
    for (let i = 0; i < list.length; i++) {
        if (list[i].pos == node.pos) {
            list.splice(i, 1);
            return list; 
        }
    }
}

function findNodeFromList(list, node) {
    for (let i = 0; i < list.length; i++) {
        if (list[i].pos == node.pos) {
            return list[i]; 
        }
    }
    return false;
}

function heuristic(pos0, pos1) {
    // This is the Manhattan distance
    var d1 = Math.abs (pos1.x - pos0.x);
    var d2 = Math.abs (pos1.y - pos0.y);
    return d1 + d2;
}

function findNeighbors(grid, node) {
    var ret = [];
    var x = node.pos.x;
    var y = node.pos.y;
 
    if(grid[y-1] && grid[y-1][x]) {
      ret.push(grid[y-1][x]);
    }
    if(grid[y+1] && grid[y+1][x]) {
      ret.push(grid[y+1][x]);
    }
    if(grid[y][x-1] && grid[y][x-1]) {
      ret.push(grid[y][x-1]);
    }
    if(grid[y][x+1] && grid[y][x+1]) {
      ret.push(grid[y][x+1]);
    }
    return ret;
}


function aStar(grid, startNode, endNode) {


    let openList = [],
        closedList = [];
    

    var openHeap = getHeap();


    openList.push(startNode);

    while(openList.length > 0) {
        var lowInd = 0;
        for(var i=0; i <openList.length; i++) {
            if (openList[i].f < openList[lowInd].f) { 
                lowInd = i; 
            }
        }

        var currentNode = openList[lowInd];

        //console.log("currentNode", currentNode);


        if(currentNode.pos == endNode.pos) {
            var curr = currentNode;
            var ret = [];
            while(curr.parent) {
                ret.push(curr);
                curr = curr.parent;
            }
            return ret.reverse();

        }


        removeNodeFromList(openList, currentNode);
        closedList.push(currentNode);

        var neighbors = findNeighbors(grid, currentNode);

/*
        console.log(neighbors);
        console.log("open", openList, "closed", closedList);

*/

        for(var i=0; i<neighbors.length;i++) {
            var neighbor = neighbors[i];
            
            if(findNodeFromList(closedList, neighbor) ) { // || neighbor.isWall()
                // not a valid node to process, skip to next neighbor
                continue;
            }
    
            // g score is the shortest distance from start to current node, we need to check if
            //   the path we have arrived at this neighbor is the shortest one we have seen yet
            var gScore = currentNode.g + neighbor.cost; // 1 is the distance from a node to it's neighbor
            var gScoreIsBest = false;
        
            if(!findNodeFromList(openList, neighbor)) {
                // This the the first time we have arrived at this node, it must be the best
                // Also, we need to take the h (heuristic) score since we haven't done so yet
        
                gScoreIsBest = true;
                neighbor.h = heuristic(neighbor.pos, endNode.pos);
                openList.push(neighbor);
            }
            else if(gScore < neighbor.totalCost) {
                // We have already seen the node, but last time it had a worse g (distance from start)
                gScoreIsBest = true;
            }
    
            if(gScoreIsBest) {
                // Found an optimal (so far) path to this node.   Store info on how we got here and
                //  just how good it really is...
                neighbor.parent = currentNode;
                neighbor.g = gScore;
                neighbor.f = neighbor.g + neighbor.h;
                neighbor.debug = "F: " + neighbor.f + "<br />G: " + neighbor.g + "<br />H: " + neighbor.h;
            }
        }
        

    }

    return [];

}

function countCost(nodes) {
    var cost = 0;
    
    nodes.forEach(node => {
        cost += node.cost;
    });

    return cost;
}

function part1(input) {

    let board = parseData(input),
        grid = initBoard(board),
        startNode = grid[0][0],
        endNode = grid[grid.length-1][grid[0].length-1];
       

    let path = aStar(grid, startNode, endNode);
    
    //path.unshift(startNode)


    return countCost(path);
}


function expandBoard(board) {
    
    let rows = board.length;
    let cols = board[0].length;
    
    board[(rows*5-1)] = [];
    board[(rows*5-1)][cols*5-1] = [];

    //console.log("Boardsize: " + rows + " x " + cols);
    
    for(let y = 0; y < rows; y++) {

        for(let x = 0; x < cols; x++) {

            for(let i = 1; i < 5; i++) {

                let newValue = board[y][x] + i;

                if(newValue > 9) {
                    newValue = newValue % 9;
                }

                let newY = (rows*i) + y;

                if (board[newY] === undefined) {
                    board[newY] = [];
                }
                
                board[newY][x] = newValue;

            }
        
        }
    }

    rows = board.length;

    for(let y = 0; y < rows; y++) {

        for(let x = 0; x < cols; x++) {

            for(let i = 1; i < 5; i++) {

                let newValue = board[y][x] + i;

                if(newValue > 9) {
                    newValue = newValue % 9;
                }

                let newX = (cols*i) + x;

                if (board[newX] === undefined) {
                    board[newX] = [];
                }
                
                board[y][newX] = newValue;

            }
        
        }
    }


    return board;
}

function part2(input) {

    let board = expandBoard(parseData(input));
        grid = initBoard(board),
        startNode = grid[0][0],
        endNode = grid[grid.length-1][grid[0].length-1];
        

    console.log(grid.length, "x", grid[0].length);

    let path = aStar(grid, startNode, endNode);


    //path.unshift(startNode)

    return countCost(path);
}

function getResults() {

    var ret = 
        "Part 1: " + part1(sample_data) +  "<br>" + 
        //"Part 2: " + part2(puzzle_data) +  "<br>" + 
        "";
    return ret;
}


exports.getResults = getResults;